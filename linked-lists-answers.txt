1. Pros and Cons of linked lists versus arrays

The pros of linked lists is that each node can be stored anywhere within the memory. This independence of node memory allows the lists to grow larger than a typical array. 

The cons of linked lists is that because the nodes can be stored anywhere, the way you access a node is via the previous node. That means, if you want to find a specific node, you have to start from the beginning and go through the entire list until you find what you are looking for. This makes it hard to find specific nodes quickly. 

2. Real world example of a linked list

An example of a linked list is a train. You have to go in order from engine to caboose, and cannot skip around when you want to.

Programming Questions

1. The issue is with using 'current'. It should only be element. 

var push = function(element) {
  var node.value = element;
  var node.next = null;
  if (!node.head) {
   node.head=element;
  } else {node.head.next=element && node.element.next =null;}
}

2. 
class Node {
  constructor(value) {
    this.value = value;
    this.next = null;
  }

  var findDuplicates = function(list) {
    let tempNode = list.head.node;
    while (tempNode != null && tempNode.next != null)
    if (tempNode.value == list.node.value) {
     tempNode.next = list.node.next;
    }
  }
  return list;
}

3.
class Node {
  constructor(value) {
    this.value = value;
    this.next = null;
  }

  var reverseList = function(list) {
   var newList = "";
   while(list.node != null){
     if (list.node.next == null && 
      newList.node.head == null) {
       list.node.current = newList.head.node;
     } else if (list.node.next == null) {
        list.node.current== newList.head.next;
     }
     }
     return newList;
  }
}
